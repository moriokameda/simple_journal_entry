/*
 * This file is generated by jOOQ.
 */
package com.okeicalm.simpleJournalEntry.infra.db.tables.records


import com.okeicalm.simpleJournalEntry.infra.db.tables.JournalEntries

import org.jooq.Field
import org.jooq.Record1
import org.jooq.Record5
import org.jooq.Row5
import org.jooq.impl.UpdatableRecordImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class JournalEntriesRecord() : UpdatableRecordImpl<JournalEntriesRecord>(JournalEntries.JOURNAL_ENTRIES), Record5<Long?, Long?, Byte?, Long?, Int?> {

    var id: Long?
        set(value): Unit = set(0, value)
        get(): Long? = get(0) as Long?

    var journalId: Long?
        set(value): Unit = set(1, value)
        get(): Long? = get(1) as Long?

    var side: Byte?
        set(value): Unit = set(2, value)
        get(): Byte? = get(2) as Byte?

    var accountId: Long?
        set(value): Unit = set(3, value)
        get(): Long? = get(3) as Long?

    var value: Int?
        set(value): Unit = set(4, value)
        get(): Int? = get(4) as Int?

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    override fun key(): Record1<Long?> = super.key() as Record1<Long?>

    // -------------------------------------------------------------------------
    // Record5 type implementation
    // -------------------------------------------------------------------------

    override fun fieldsRow(): Row5<Long?, Long?, Byte?, Long?, Int?> = super.fieldsRow() as Row5<Long?, Long?, Byte?, Long?, Int?>
    override fun valuesRow(): Row5<Long?, Long?, Byte?, Long?, Int?> = super.valuesRow() as Row5<Long?, Long?, Byte?, Long?, Int?>
    override fun field1(): Field<Long?> = JournalEntries.JOURNAL_ENTRIES.ID
    override fun field2(): Field<Long?> = JournalEntries.JOURNAL_ENTRIES.JOURNAL_ID
    override fun field3(): Field<Byte?> = JournalEntries.JOURNAL_ENTRIES.SIDE
    override fun field4(): Field<Long?> = JournalEntries.JOURNAL_ENTRIES.ACCOUNT_ID
    override fun field5(): Field<Int?> = JournalEntries.JOURNAL_ENTRIES.VALUE
    override fun component1(): Long? = id
    override fun component2(): Long? = journalId
    override fun component3(): Byte? = side
    override fun component4(): Long? = accountId
    override fun component5(): Int? = value
    override fun value1(): Long? = id
    override fun value2(): Long? = journalId
    override fun value3(): Byte? = side
    override fun value4(): Long? = accountId
    override fun value5(): Int? = value

    override fun value1(value: Long?): JournalEntriesRecord {
        this.id = value
        return this
    }

    override fun value2(value: Long?): JournalEntriesRecord {
        this.journalId = value
        return this
    }

    override fun value3(value: Byte?): JournalEntriesRecord {
        this.side = value
        return this
    }

    override fun value4(value: Long?): JournalEntriesRecord {
        this.accountId = value
        return this
    }

    override fun value5(value: Int?): JournalEntriesRecord {
        this.value = value
        return this
    }

    override fun values(value1: Long?, value2: Long?, value3: Byte?, value4: Long?, value5: Int?): JournalEntriesRecord {
        this.value1(value1)
        this.value2(value2)
        this.value3(value3)
        this.value4(value4)
        this.value5(value5)
        return this
    }

    /**
     * Create a detached, initialised JournalEntriesRecord
     */
    constructor(id: Long? = null, journalId: Long? = null, side: Byte? = null, accountId: Long? = null, value: Int? = null): this() {
        this.id = id
        this.journalId = journalId
        this.side = side
        this.accountId = accountId
        this.value = value
    }
}

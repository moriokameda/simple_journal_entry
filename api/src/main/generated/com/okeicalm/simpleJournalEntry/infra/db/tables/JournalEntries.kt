/*
 * This file is generated by jOOQ.
 */
package com.okeicalm.simpleJournalEntry.infra.db.tables


import com.okeicalm.simpleJournalEntry.infra.db.SimpleJournalEntryDb
import com.okeicalm.simpleJournalEntry.infra.db.indexes.JOURNAL_ENTRIES_FK_ACCOUNT
import com.okeicalm.simpleJournalEntry.infra.db.indexes.JOURNAL_ENTRIES_FK_JOURNAL
import com.okeicalm.simpleJournalEntry.infra.db.keys.JOURNAL_ENTRIES_IBFK_1
import com.okeicalm.simpleJournalEntry.infra.db.keys.JOURNAL_ENTRIES_IBFK_2
import com.okeicalm.simpleJournalEntry.infra.db.keys.KEY_JOURNAL_ENTRIES_PRIMARY
import com.okeicalm.simpleJournalEntry.infra.db.tables.records.JournalEntriesRecord

import kotlin.collections.List

import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Identity
import org.jooq.Index
import org.jooq.Name
import org.jooq.Record
import org.jooq.Row5
import org.jooq.Schema
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.UniqueKey
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class JournalEntries(
    alias: Name,
    child: Table<out Record>?,
    path: ForeignKey<out Record, JournalEntriesRecord>?,
    aliased: Table<JournalEntriesRecord>?,
    parameters: Array<Field<*>?>?
): TableImpl<JournalEntriesRecord>(
    alias,
    SimpleJournalEntryDb.SIMPLE_JOURNAL_ENTRY_DB,
    child,
    path,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.table()
) {
    companion object {

        /**
         * The reference instance of
         * <code>simple_journal_entry_db.journal_entries</code>
         */
        val JOURNAL_ENTRIES: JournalEntries = JournalEntries()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<JournalEntriesRecord> = JournalEntriesRecord::class.java

    /**
     * The column <code>simple_journal_entry_db.journal_entries.id</code>.
     */
    val ID: TableField<JournalEntriesRecord, Long?> = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "")

    /**
     * The column
     * <code>simple_journal_entry_db.journal_entries.journal_id</code>.
     */
    val JOURNAL_ID: TableField<JournalEntriesRecord, Long?> = createField(DSL.name("journal_id"), SQLDataType.BIGINT.nullable(false), this, "")

    /**
     * The column <code>simple_journal_entry_db.journal_entries.side</code>.
     */
    val SIDE: TableField<JournalEntriesRecord, Byte?> = createField(DSL.name("side"), SQLDataType.TINYINT.nullable(false), this, "")

    /**
     * The column
     * <code>simple_journal_entry_db.journal_entries.account_id</code>.
     */
    val ACCOUNT_ID: TableField<JournalEntriesRecord, Long?> = createField(DSL.name("account_id"), SQLDataType.BIGINT.nullable(false), this, "")

    /**
     * The column <code>simple_journal_entry_db.journal_entries.value</code>.
     */
    val VALUE: TableField<JournalEntriesRecord, Int?> = createField(DSL.name("value"), SQLDataType.INTEGER.nullable(false), this, "")

    private constructor(alias: Name, aliased: Table<JournalEntriesRecord>?): this(alias, null, null, aliased, null)
    private constructor(alias: Name, aliased: Table<JournalEntriesRecord>?, parameters: Array<Field<*>?>?): this(alias, null, null, aliased, parameters)

    /**
     * Create an aliased <code>simple_journal_entry_db.journal_entries</code>
     * table reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>simple_journal_entry_db.journal_entries</code>
     * table reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>simple_journal_entry_db.journal_entries</code> table
     * reference
     */
    constructor(): this(DSL.name("journal_entries"), null)

    constructor(child: Table<out Record>, key: ForeignKey<out Record, JournalEntriesRecord>): this(Internal.createPathAlias(child, key), child, key, JOURNAL_ENTRIES, null)
    override fun getSchema(): Schema? = if (aliased()) null else SimpleJournalEntryDb.SIMPLE_JOURNAL_ENTRY_DB
    override fun getIndexes(): List<Index> = listOf(JOURNAL_ENTRIES_FK_ACCOUNT, JOURNAL_ENTRIES_FK_JOURNAL)
    override fun getIdentity(): Identity<JournalEntriesRecord, Long?> = super.getIdentity() as Identity<JournalEntriesRecord, Long?>
    override fun getPrimaryKey(): UniqueKey<JournalEntriesRecord> = KEY_JOURNAL_ENTRIES_PRIMARY
    override fun getReferences(): List<ForeignKey<JournalEntriesRecord, *>> = listOf(JOURNAL_ENTRIES_IBFK_1, JOURNAL_ENTRIES_IBFK_2)

    private lateinit var _journals: Journals
    private lateinit var _accounts: Accounts
    fun journals(): Journals {
        if (!this::_journals.isInitialized)
            _journals = Journals(this, JOURNAL_ENTRIES_IBFK_1)

        return _journals;
    }
    fun accounts(): Accounts {
        if (!this::_accounts.isInitialized)
            _accounts = Accounts(this, JOURNAL_ENTRIES_IBFK_2)

        return _accounts;
    }
    override fun `as`(alias: String): JournalEntries = JournalEntries(DSL.name(alias), this)
    override fun `as`(alias: Name): JournalEntries = JournalEntries(alias, this)

    /**
     * Rename this table
     */
    override fun rename(name: String): JournalEntries = JournalEntries(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): JournalEntries = JournalEntries(name, null)

    // -------------------------------------------------------------------------
    // Row5 type methods
    // -------------------------------------------------------------------------
    override fun fieldsRow(): Row5<Long?, Long?, Byte?, Long?, Int?> = super.fieldsRow() as Row5<Long?, Long?, Byte?, Long?, Int?>
}

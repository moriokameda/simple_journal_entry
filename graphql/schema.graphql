schema {
  query: Query
  mutation: Mutation
}

scalar LocalDatetime

"Directs the executor to include this field or fragment only when the `if` argument is true"
directive @include(
    "Included when true."
    if: Boolean!
  ) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT

"Directs the executor to skip this field or fragment when the `if`'argument is true."
directive @skip(
    "Skipped when true."
    if: Boolean!
  ) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT

"Marks the field, argument, input field or enum value as deprecated"
directive @deprecated(
    "The reason for the deprecation"
    reason: String = "No longer supported"
  ) on FIELD_DEFINITION | ARGUMENT_DEFINITION | ENUM_VALUE | INPUT_FIELD_DEFINITION

"Exposes a URL that specifies the behaviour of this scalar."
directive @specifiedBy(
    "The URL that specifies the behaviour of this scalar."
    url: String!
  ) on SCALAR

type Account {
  code: String!
  elementType: AccountElementType!
  id: ID!
  name: String!
}

type DeleteAccountPayload {
  deletedAccount: Account
}

type Journal {
  id: ID!
  incurredOn: Date!
  journalEntries: [JournalEntry!]!
}

type JournalEntry {
  account: Account!
  id: ID!
  side: Int!
  value: Int!
}

type Comic {
  id: ID!
  name: String!
  isPublished: Boolean!
  createdAt: LocalDatetime!
  updatedAt: LocalDatetime!
}

type DeleteComicPayload {
  deletedComic: Comic
}

type Mutation {
  createAccount(input: CreateAccountInput!): Account!
  createJournal(input: CreateJournalInput!): Journal!
  createComic(input: CreateComicInput!): Comic!
  deleteAccount(input: DeleteAccountInput!): DeleteAccountPayload!
  deleteComic(input: DeleteComicInput!): DeleteComicPayload!
  updateAccount(input: UpdateAccountInput!): Account!
}

type Query {
  allAccounts: [Account!]!
  allJournals: [Journal!]!
  allComics: [Comic!]!
}

enum AccountElementType {
  ASSETS
  EXPENSES
  LIABILITIES
  NET_ASSETS
  NET_INCOME
  REVENUE
}

"An RFC-3339 compliant Full Date Scalar"
scalar Date

input CreateAccountInput {
  code: String!
  elementType: AccountElementType!
  name: String!
}

input CreateJournalEntryInput {
  accountID: ID!
  side: Int!
  value: Int!
}

input CreateJournalInput {
  createJournalEntryInput: [CreateJournalEntryInput!]!
  incurredOn: Int!
}

input CreateComicInput {
  name: String!,
  isPublished: Boolean!,
}

input DeleteAccountInput {
  id: ID!
}

input DeleteComicInput {
  id: ID!
}

input UpdateAccountInput {
  code: String!
  elementType: AccountElementType!
  id: ID!
  name: String!
}

input UpdateComicInput {
  id: ID!
  name: String!
  isPublished: Boolean!
}